{"version":3,"sources":["component/app-header/index.js","component/app-header/app-header.js","component/app-search-input/index.js","component/app-search-input/app-search-input.js","component/item-status-button/index.js","component/item-status-button/item-status-button.js","component/todo-list-item/todo-list-item.js","component/todo-list/index.js","component/todo-list/todo-list.js","component/item-add-form/index.js","component/item-add-form/item-add-form.js","component/todo-app/index.js","component/todo-app/todo-app.js","index.js"],"names":["Title","toDo","done","className","Input","state","term","onSearchChange","e","target","value","setState","props","placeholder","type","this","onChange","Component","Button","onClick","checkDoneItem","React","TodoListItem","label","onDeleted","onToggleImportant","onToggleDone","classNames","important","TodoList","todos","elements","map","item","id","itemProps","key","ItemAddForm","onLabelChange","onSubmit","preventDefault","onItemAdded","TodoApp","maxId","todoData","createTodoItem","a","filter","el","deleteItem","idx","findIndex","slice","addItem","text","newItem","toggleProperty","arr","propName","oldItem","items","length","toLowerCase","indexOf","visibleItems","search","doneItemCount","todoItemCount","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1a7b26db.chunk.js","sourcesContent":["import Title from \"./app-header\";\n\nexport default Title;","import React from \"react\";\nimport './app-header.css'\n\nconst Title = ({toDo,done}) => {\n    return (\n        <div className=\"app-header d-flex\">\n            <h1>ToDo List</h1>\n            <h2>{toDo} more to do, {done} done </h2>\n        </div>\n    )\n}\n\nexport default Title;","import Input from \"./app-search-input\";\n\nexport default Input;","import React, {Component} from \"react\";\nimport \"./app-seacrh-input.css\"\n\n\n\nexport default class Input extends Component {\n     state = {\n         term: \"\"\n     }\n\n    onSearchChange = (e) => {\n         const term = e.target.value;\n         this.setState({ term });\n         this.props.onSearchChange(term);\n    }\n\n    render() {\n        return (\n            <input className=\"app-search-input\"\n                   placeholder=\"type to search\"\n                   type='text'\n                   value={this.state.term}\n                   onChange={this.onSearchChange}\n\n            />\n\n        )\n\n    }\n\n}","import Button from \"./item-status-button\";\nexport default Button;","import React from \"react\";\nimport \"./item-status-button.css\"\n\nexport default class Button extends React.Component{\n    render () {\n        return (\n            <div className=\"item-status-button\">\n                <button className=\"btn btn-info\">All</button>\n                <button className=\"btn btn-outline-secondary\">Active</button>\n                <button className=\"btn btn-outline-secondary\" onClick={this.props.checkDoneItem}>Done</button>\n            </div>\n        )\n    }\n}\n\n// const Button = () => {\n//     return (\n//         <div className=\"item-status-button\">\n//             <button className=\"btn btn-info\">All</button>\n//             <button className=\"btn btn-outline-secondary\">Active</button>\n//             <button className=\"btn btn-outline-secondary\">Done</button>\n//         </div>\n//     )\n// }\n//             export default Button;","import React from \"react\";\nimport \"./todo-list-item.css\"\n\n\n\nexport default class TodoListItem extends React.Component {\n\n\n// setState отвечает за то что если чтото в state изменяется\n\n\n  render() {\n      \n      const {label, onDeleted, onToggleImportant, onToggleDone,done,important} = this.props;\n\n      let classNames = 'todo-list-item';\n      if (done) {\n          classNames += ' done';  //откуда он понимает что он done?\n      }\n\n      if (important) {\n          classNames += ' important';\n      }\n\n      return (\n\n\n          <span className={classNames}>\n      <span\n          className=\"todo-list-item-label\"\n          onClick={onToggleDone}\n      >\n        {label}\n      </span>\n\n      <button type=\"button\"\n              className=\"btn btn-outline-success btn-sm float-right\" onClick={onToggleImportant}>\n        <i className=\"fa fa-exclamation\" />\n      </button>\n\n      <button type=\"button\"\n              className=\"btn btn-outline-danger btn-sm float-right\" onClick={onDeleted}>\n        <i className=\"fa fa-trash-o\" />\n      </button>\n    </span>\n      )\n  }\n}\n// const TodoListItem = ({label, important = false}) => {\n//\n//     const style = {\n//         color: important ? 'steelblue' : 'black',\n//         fontWeight: important ? 'bold' : 'normal'\n//     };\n//\n//     return (\n//         <span className=\"todo-list-item\">\n//       <span\n//           className=\"todo-list-item-label\"\n//           style={style}>\n//         {label}\n//       </span>\n//\n//       <button type=\"button\"\n//               className=\"btn btn-outline-success btn-sm float-right\">\n//         <i className=\"fa fa-exclamation\" />\n//       </button>\n//\n//       <button type=\"button\"\n//               className=\"btn btn-outline-danger btn-sm float-right\">\n//         <i className=\"fa fa-trash-o\" />\n//       </button>\n//     </span>\n//     )\n// }\n\n// export default TodoListItem;","import TodoList from \"./todo-list\";\nexport default TodoList;","import React from \"react\";\nimport TodoListItem from \"../todo-list-item/todo-list-item\";\nimport \"./todo-list.css\";\n\nconst TodoList = ({todos, onDeleted, onToggleImportant, onToggleDone}) => {\n    const elements = todos.map((item) => {\n    const {id, ...itemProps} = item; //  в itemProps запишется все кроме id, в Реакт нужно передавать только те значения которыми ты пользуешься\n    return (\n        <li key={id} className='list-group-item'>\n            <TodoListItem {...itemProps}\n                          onDeleted={()=> onDeleted(id)}\n                          onToggleDone={()=> onToggleDone(id)}\n                          onToggleImportant={()=> onToggleImportant(id)}\n\n            />\n        </li>\n        )\n    });\n\n    return (\n        <ul className='list-group todo-list'>\n            {elements}\n        </ul>\n    )\n}\n\nexport default TodoList;","import ItemAddForm from \"./item-add-form\";\n\nexport default ItemAddForm;","import React, {Component} from \"react\";\n\nimport './item-add-form.css'\n\nexport default class ItemAddForm extends Component{\nstate = {\n    label: \"\"\n}\n    onLabelChange = (e) => {\n       this.setState({\n           label: e.target.value\n       })\n    }\n\n    onSubmit = (e) => {\n        e.preventDefault();\n        this.props.onItemAdded(this.state.label);\n        this.setState({\n            label: \" \"\n        });\n    }\n    render () { // onClick={() => this.props.onItemAdded(\"Hello\")}\n        return (\n            <form className=\"item-add-form d-flex\"\n            onSubmit={this.onSubmit}\n            >\n\n                <input type=\"text\"\n                className=\"form-control\"\n                onChange={this.onLabelChange}\n                placeholder=\"What needs to be done\"\n                value={this.state.label}\n                />\n                <button\n                    className='btn btn-outline-primary'\n                    >\n                    Add form\n                </button>\n            </form>\n        )\n    }\n}","import TodoApp from \"./todo-app\";\n\nexport default TodoApp;","import Title from \"../app-header\";\nimport Input from \"../app-search-input\";\nimport Button from \"../item-status-button\";\nimport TodoList from \"../todo-list\";\nimport ItemAddForm from \"../item-add-form\";\nimport React from \"react\";\nimport \"./todo-app.css\";\n\n\nexport default class TodoApp extends React.Component  {\n    maxId = 100;\n    state = {\n        todoData: [\n            this.createTodoItem('Drink juice'),\n            this.createTodoItem('Study React'),\n            this.createTodoItem('Make an awesome todo-app')\n        ],\n        term: \"\"\n    }\n\n    createTodoItem (label) {\n        return {\n            label,\n            important: false,\n            done: false,\n            id: this.maxId++\n        }\n    }\n\n    onSearchChange = (term) => {\n        this.setState({term})\n    }\n\n\n    checkDoneItem = () => {\n        const a = this.state.todoData.filter(el => el.done);\n        this.setState(({todoData}) => {\n            return {\n                todoData: a\n            }\n        })\n    }\n\n    deleteItem = (id)=> {\n        this.setState(({ todoData }) => {\n            const idx = todoData.findIndex((el)=> el.id === id );\n\n            const newArr = [ // масив старый изменять нельзя по этому мы создаем новый ммасив и вырыезаем значение до нашего и после нашего и добавляем в новый масв\n                ...todoData.slice(0,idx),\n                ...todoData.slice(idx+1)\n            ];\n            return {\n                todoData: newArr\n            }\n\n        })\n\n    };\n\n    addItem = (text) => {\n        const newItem = this.createTodoItem(text);\n\n            // добавление нового элемента в список, id генерируем\n        this.setState(({todoData}) => {\n             const newArr = [...todoData, newItem];\n\n            return  {\n                todoData: newArr\n            }\n        })\n    }\n\n    toggleProperty (arr, id, propName) {\n            const idx = arr.findIndex((el)=> el.id === id ); // масив старый изменять нельзя по этому мы создаем новый ммасив и вырыезаем значение до нашего и после нашего и добавляем в новый масв\n\n            const oldItem = arr[idx];\n            const newItem = {...oldItem,\n                [propName]: !oldItem[propName] };\n\n\n\n            return [\n                ...arr.slice(0,idx),\n                newItem,\n                ...arr.slice(idx+1)\n            ];\n    }\n\n    onToggleDone = (id) => {\n        this.setState(({todoData})=> {\n            return {\n                todoData: this.toggleProperty(todoData,id, 'done')\n            }\n        });\n    };\n\n    onToggleImportant = (id) => {\n        this.setState(({todoData})=> {\n            return {\n                todoData: this.toggleProperty(todoData,id, 'important')\n            }\n        });\n    }\n\n    search(items,term) {\n        if (term.length === 0) {\n            return (\n                items\n            )\n        }\n\n       return  items.filter((item) => {\n            return item.label.toLowerCase().indexOf(term.toLowerCase()) > -1;\n            }\n\n        )\n    }\n\n    render() {\n    const {todoData, term} = this.state;\n    const visibleItems = this.search(todoData, term);\n    const doneItemCount = todoData.filter((el) => el.done).length; //почему проходимся по tododata а не по ofDoneItem.newarray\n    const todoItemCount = todoData.length - doneItemCount;\n\n        return (\n            <div className=\"todo-app\">\n                <Title toDo={todoItemCount} done={doneItemCount}/>\n                <div className=\"top-panel d-flex\">\n                    <Input onSearchChange={this.onSearchChange}/>\n                    <Button checkDoneItem={this.checkDoneItem}/>\n                </div>\n                <TodoList todos={visibleItems}\n                          onDeleted={this.deleteItem}\n                          onToggleDone={this.onToggleDone}\n                          onToggleImportant={this.onToggleImportant}\n                />\n\n                 <ItemAddForm onItemAdded={this.addItem}/>\n            </div>\n        )\n    }\n\n} ;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport TodoApp from \"./component/todo-app\";\n\n\n\n\n\n\nReactDOM.render(<TodoApp/>,document.getElementById('root'));\n"],"sourceRoot":""}